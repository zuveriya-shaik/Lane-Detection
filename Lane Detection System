import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

import cv2
import os
import numpy as np

dataset_path = '/content/drive/MyDrive/lane_dataset/'

images = []
labels = []

for class_name in os.listdir(dataset_path):
    class_folder = os.path.join(dataset_path, class_name)
    for image_name in os.listdir(class_folder):
        image_path = os.path.join(class_folder, image_name)
        image = cv2.imread(image_path)
        image = cv2.resize(image, (32, 32))
        image = image / 255.0
        images.append(image)
        labels.append(class_name)

labels = np.array(labels)
images = np.array(images)
train_images = images[0:160]
test_images = images[160:]
train_labels = labels[0:160]
test_labels = labels[160:]

print(len(images))
print(len(labels))


from scipy.ndimage import zoom
from moviepy.editor import VideoFileClip
from tensorflow import keras

model = keras.models.load_model("/content/drive/MyDrive/model.h5")

class Lanes():
  def __init__(self):
    self.recent_fit=[]
    self.avg_fit=[]

def road_lines(image):
    new_height, new_width = 80, 160
    small_img = zoom(image, (new_height / image.shape[0], new_width / image.shape[1], 1))

    small_img = np.array(small_img)
    small_img = small_img[None, :, :, :]

    prediction = model.predict(small_img)[0] * 255

    lanes.recent_fit.append(prediction)

    if len(lanes.recent_fit) > 5:
        lanes.recent_fit = lanes.recent_fit[1:]

    lanes.avg_fit = np.mean(np.array([i for i in lanes.recent_fit]), axis=0)

    blanks = np.zeros_like(lanes.avg_fit).astype(np.uint8)
    lane_drawn = np.dstack((blanks, lanes.avg_fit, blanks))

    new_height, new_width = 720, 1280
    lane_drawn_resized = zoom(lane_drawn, (new_height / lane_drawn.shape[0], new_width / lane_drawn.shape[1], 1))

    lane_drawn_resized = lane_drawn_resized.astype(image.dtype)

    image = image.astype(lane_drawn_resized.dtype)

    result = cv2.addWeighted(image, 1, lane_drawn_resized, 1, 0)

    return result

def deploy_code(path):
    #ouput = "/content/lanes_output_video.mp4"
    #return output
    vid_input = VideoFileClip(path) #"/content/drive/MyDrive/lanes_clip.mp4"
    vid_output = 'lane_output_video.mp4'
    lanes = Lanes()
    vid_clip = vid_input.fl_image(road_lines)
    vid_clip.write_videofile(vid_output)
    return vid_output

import h5py
import tensorflow as tf

file_path = '/content/drive/MyDrive/model.h5'
model = tf.keras.models.load_model(file_path)
model.summary()

!pip install -q gradio

import gradio as gr
def process_video(input_video):
    #output_video = deploy_code(input_video)
    output_video = "/content/lanes_output_video.mp4"
    return output_video

iface = gr.Interface(fn=process_video, inputs=gr.inputs.Video(label="Input Video"), outputs="video")
iface.launch()
